
<script src="/javascripts/openvidu-browser-2.6.0.js"></script>
<script>
var chatContent = document.getElementById('chat-content');
        var token = <%- JSON.stringify(token) %>;
        // const socket = io ('http://localhost:3000');
        const OV = new OpenVidu();
        session = OV.initSession();
        session.on('streamCreated', (event) => {
            session.subscribe(event.stream, "remoteVideo");
        });

        session.on('signal:add-quiz', (event) => {
            var urlQuizStudent = '/student/get-quiz?lessonId=' + $("input[name='lessonId']").val();
            document.getElementById('timer').innerHTML =
            parseInt(event.data) + ":" + 00;
            startTimer();
            $.get(urlQuizStudent, function(data, status){
                $('#slideContainer').hide();
                $('#youtubeIframe').hide();
                $('#quiz-container').append(data);
                $('#quiz-container').show();
            });
        });

        session.on('signal:chat', (event) => {
            var data = event.data.split(/!8q1&0@n9/);
            var today = new Date();

            chatContent.innerHTML += `<li class="left clearfix">
                                        <span class="chat-img pull-left">
                                            <img src="./../images/avatar.png" alt="User Avatar" class="img-circle" />
                                        </span>
                                        <div class="chat-body clearfix">
                                            <div class="header">
                                                <strong class="primary-font">${data[0]}</strong>
                                                <small class="pull-right text-muted">
                                            </div>
                                            <p>
                                              ${data[1]}  
                                            </p>
                                            <p style="font-size: 85%; text-align: right " class="text-right">
                                            ${today.getHours()}:${today.getMinutes()}
                                            </p>
                                        </div>
                                    </li>`;
        });

        session.on('signal:change page slide', event => {
            changePage(parseInt(event.data));
            currentNumber.value = parseInt(event.data);
        });

        session.on('signal:next slide', event => {
            changePage(parseInt(event.data));
            currentNumber.value = parseInt(event.data);
        });

        session.on('signal:previous slide', event => {
            changePage(parseInt(event.data));
            currentNumber.value = parseInt(event.data);
        });

        session.on('signal:send slide event', event => {
            showSlide(event.data);
            $('#youtubeIframe').hide();
            $('#quiz-container').hide();
            $('#slideContainer').show();
        });

        session.on('signal:youtube', event => {
            var linkYoutube = event.data;
            $('#slideContainer').hide();
            $('#quiz-container').hide();
            $('#youtubeIframe').attr('src', linkYoutube);
            $('#youtubeIframe').show();
        });

        session.connect(token)
            .then(() => {
                var publisher = OV.initPublisher('localVideo');
                session.publish(publisher);
            })
            .catch(err => console.log(err));

        var btnChat = document.getElementById('btn-chat');
        var txtMessage = document.getElementById('txtMessage');
        const username = document.getElementById('username');
        btnChat.onclick = () => {
            var messageData = username.value + '!8q1&0@n9' + txtMessage.value;
            session.signal({
                data: messageData,
                to: [],                     // Array of Connection objects (optional. Broadcast to everyone if empty)
                type: 'chat'             // The type of message (optional)
            });
            txtMessage.value = '';
        }
        txtMessage.onkeydown = (event) => {
            if (event.keyCode == 13) {
                var user = '';
                if (username.value != '') {
                    user = username.value;
                } else {
                    user = email.value;
                }
                var messageData = user + '!8q1&0@n9' + txtMessage.value;
                session.signal({
                    data: messageData,
                    to: [],                     // Array of Connection objects (optional. Broadcast to everyone if empty)
                    type: 'chat'             // The type of message (optional)
                });
                txtMessage.value = '';
            }
        }

        // For slide present
        var url = '../doc/test.pdf';
        var currentNumber = document.getElementById('currentNumber');
        var canvas = document.getElementById('the-canvas');
        var context = canvas.getContext('2d');

        var currentPage = document.getElementById('currentPage');
        var obj = PDFJS.getDocument(url);
        var maxPage;
        obj.then(pdf => {
            maxPage = pdf.pdfInfo.numPages;
            document.getElementById('maxNumber').innerHTML = maxPage;
        });
        changePage(parseInt(currentNumber.value));
        currentNumber.oninput = () => {
            var number = parseInt(currentNumber.value);
            if (number > 0 && number <= maxPage) {
                changePage(parseInt(currentNumber.value));
            }
        };
        function changePage(pageNumber) {
            obj.then(function (pdf) {
                return pdf.getPage(pageNumber);
            })
                .then(function (page) {
                    var scale = 1;
                    var viewport = page.getViewport(scale);
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    var renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);
                });
        }

        document.getElementById('btnNext').onclick = () => {
            var nextPage = parseInt(currentNumber.value) + 1;
            if (nextPage <= maxPage) {
                currentNumber.value = nextPage;
                changePage(nextPage);
            }
        }

        document.getElementById('btnPre').onclick = () => {
            var prePage = parseInt(currentNumber.value) - 1;
            if (prePage > 0) {
                currentNumber.value = prePage;
                changePage(prePage);
            }
        }
</script>